@inject IViewCategoryRepository ViewCategoryRepository
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@using OSD.SysMapper.Components.LOV

@if (!submitted)
{

        <RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
            DataGrid <strong>Category Inventory</strong>
        </RadzenText>
        <RadzenCard Class="m-4" style="display: flex; align-items: center; gap: 0.5rem">
            <RadzenCheckBox @bind-Value=@allowRowSelectOnRowClick Name="CheckBox1" />
            <RadzenLabel Text="Uncheck for individual edits, check select on row click" Component="CheckBox1" />
        </RadzenCard>

        <RadzenDataGrid 
            TItem="VCategory"
            Data="@data"

                        @ref="dataGrid"
                        AllowRowSelectOnRowClick="@allowRowSelectOnRowClick"
                        SelectionMode="DataGridSelectionMode.Multiple" 
                        @bind-Value=@selectedData Class="m-4"


            AllowColumnResize="true"

                        AllowFiltering="true"
                        FilterMode="FilterMode.Advanced"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        LogicalFilterOperator="LogicalFilterOperator.Or"

            PageSize="5"
            AllowPaging="true" 
            PagerHorizontalAlign="HorizontalAlign.Center" 
            AllowSorting="true" 
            PageSizeOptions="@pageSizeOptions" 
            ShowPagingSummary="@showPagerSummary" 
            PagingSummaryFormat="@pagingSummaryFormat" 
            Page="@OnPage">

            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="VCategory" Width="60px" Sortable="false" Filterable="false">
                    <HeaderTemplate>
                        <RadzenCheckBox TriState="false" TValue="bool" Value="@(data.Any(i => selectedData != null && selectedData.Contains(i)))"
                                        Change="@(args => selectedData = args ? data.ToList() : null)" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TriState="false" Value="@(selectedData != null && selectedData.Contains(data))"
                                        TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { dataGrid.SelectRow(data); }}) />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="VCategory" Property="CategoryId" Title="Category ID"  TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="VCategory" Property="Name" Title="Category Name" />
                <RadzenDataGridColumn TItem="VCategory" Property="LifeCycleId" Title="LifeCycle ID" />
                <RadzenDataGridColumn TItem="VCategory" Property="LifeCycleName" Title="LifeCycle Name" />
            <RadzenDataGridColumn TItem="VCategory" Property="LifeCycleId" Title="Edit" Sortable="false" Filterable="false">
                    <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Dark" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" Class="m-1" Click=@(() => ShowEditDialog(data)) Text="edit" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <RadzenButton Shade="Shade.Darker" Click=ShowOnDeleteDialog Text="Delete Selected Records" ButtonStyle="ButtonStyle.Danger" />
        <RadzenButton Shade="Shade.Darker" Click=ShowUpdateDialog Text="Bulk Update Selected Records" ButtonStyle="ButtonStyle.Danger" />

}
 


@code {
    // List<Category> data = new List<Category>();
    private IEnumerable<VCategory> data;
    IList<VCategory> selectedData;

    int bulkLifeCycleId { get; set; } = -1;
    RadzenDataGrid<VCategory> dataGrid;

    bool allowRowSelectOnRowClick = true;
    bool submitted = false;
    bool bulkUpdate = false;


    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 20, 30 };
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";

    bool showPagerSummary = true;

    private int delcount { get; set; } = 0;
    private string deleted_text { get; set; }
    async Task FirstPage()
    {
        await dataGrid.FirstPage();
    }
    async Task TenthPage()
    {
        await dataGrid.GoToPage(9);
    }
    async Task LastPage()
    {
        await dataGrid.LastPage();
    }
    string emptyText = "No Items to display!";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        data = ViewCategoryRepository.GetAll();
    }
    void OnPage(PagerEventArgs args)
    {
    //
    }


 
    async Task ShowOnDeleteDialog()
    {
        var result = await DialogService.OpenAsync("Delete Dialog", ds =>
        @<div>
            <p Style="margin-bottom: 1rem">Delete @selectedData.Count() Records?</p>
            <div class="row">

                <div class="col-md-12">
                    <RadzenButton Text="Ok" ButtonStyle="ButtonStyle.Danger"  Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Dark" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Refresh" Click="(() => { submitted = false; ds.Refresh(); })" ButtonStyle="ButtonStyle.Info" Style="margin-bottom: 10px; width: 150px" />
                
                </div>
            </div>
        </div>
    );
        if(result) 
        {
            OnDelete();
        }
        Console.WriteLine($"ShowOnDeleteDialog Dialog result: {result}");
    }
    async void   OnDelete()
    {
        foreach (var item in selectedData){
            Console.WriteLine($"Deleting item {item.CategoryId}");

            var dbresult = await  CategoryRepository.RemoveAsync(item.CategoryId);
            if (dbresult != 1)
            {
                Console.WriteLine($"Failed removing record {item.CategoryId} with status {dbresult}");
            } else {
                Console.WriteLine($"Removed item {item.CategoryId}");
                delcount++;
                
            }
        }
        NavigationManager.NavigateTo("/categoryIndex", true);
         
    }
     async Task ShowEditDialog(VCategory T)
    {
        var result = await DialogService.OpenAsync("Edit Dialog", ds =>
        @<div>
            <p Style="margin-bottom: 1rem">Update @T.Name Record?</p>
            <div class="row">
                <div class="col-md-12">
                    <LifecycleLOV OnClose="BulkLifeCycleId"  ></LifecycleLOV>

                </div>
                <div class="col-md-12">
                    <RadzenButton Text="Ok" ButtonStyle="ButtonStyle.Danger"  Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Dark" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Refresh" Click="(() => { submitted = false; ds.Refresh(); })" ButtonStyle="ButtonStyle.Info" Style="margin-bottom: 10px; width: 150px" />
                
                </div>
            </div>
        </div>
    );
        if(result) 
        {
            try {
 
                    var u  = new Category();
                    u.Name = T.Name;
                    u.CategoryId = T.CategoryId;
                    u.LifeCycleId = bulkLifeCycleId;

                    await CategoryRepository.UpdateAsync(u);
                    Console.WriteLine($"Updated Item {T.Name} with {u.LifeCycleId} in ShowUpdateDialog");
                    NavigationManager.NavigateTo("/categoryIndex", true);
 

            } 
            catch (Exception e)
            {
                throw e;
            }
        }
        Console.WriteLine($"ShowEditDialog Dialog result: {result}");
    }

    async Task ShowUpdateDialog()
    {
        var result = await DialogService.OpenAsync("Update Dialog", ds =>
        @<div>
            <p Style="margin-bottom: 1rem">Update @selectedData.Count() Records?</p>
            <div class="row">
                <div class="col-md-12">
                    <LifecycleLOV OnClose="BulkLifeCycleId"  ></LifecycleLOV>

                </div>
                <div class="col-md-12">
                    <RadzenButton Text="Ok" ButtonStyle="ButtonStyle.Danger"  Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Dark" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Refresh" Click="(() => { submitted = false; ds.Refresh(); })" ButtonStyle="ButtonStyle.Info" Style="margin-bottom: 10px; width: 150px" />
                
                </div>
            </div>
        </div>
    );
        if(result) 
        {
            try {
                foreach (var item in selectedData ) 
                {
                    var u  = new Category();
                    u.Name = item.Name;
                    u.CategoryId = item.CategoryId;
                    u.LifeCycleId = bulkLifeCycleId;

                    await CategoryRepository.UpdateAsync(u);
                    Console.WriteLine($"Updated Item {item.Name} with {u.LifeCycleId} in ShowUpdateDialog");
                    NavigationManager.NavigateTo("/categoryIndex", true);
                }

            } 
            catch (Exception e)
            {
                throw e;
            }
        }
        Console.WriteLine($"ShowUpdateDialog Dialog result: {result}");
    }

    void BulkLifeCycleId(int newLifecycleId) {
        bulkLifeCycleId = newLifecycleId;
        Console.WriteLine($"Setting bulkLifeCycleId to {newLifecycleId} in  BulkLifeCycleId");
    }
 

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        Console.Write($"{message.Severity} notification");
        NavigationManager.NavigateTo("/categoryIndex", true);
    }
    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Simple Dialog", ds =>
    @<div>
                <p Style="margin-bottom: 1rem">Confirm?</p>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary"  Style="margin-bottom: 10px; width: 150px"/>
                <RadzenButton Text="Refresh" Click="(() => { submitted = false; ds.Refresh(); })" ButtonStyle="ButtonStyle.Info" Style="margin-bottom: 10px; width: 150px" />
                Order ID: @submitted
                    </div>
                </div>
    </div>);

        Console.WriteLine($"Dialog result: {result}");
    }
}