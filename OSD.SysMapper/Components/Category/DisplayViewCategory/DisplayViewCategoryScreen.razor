@inject IViewCategoryRepository ViewCategoryRepository
@inject NavigationManager NavigationManager

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>
<SearchBar OnSearch="HandleSearch" Title="Search Categories">

</SearchBar>
<br/>
<table class="table">
    <thead>
        <tr>
            <th class="sort-th" @onclick="@(() => SortTable("CategoryId"))">ID<span class="fa @(SetSortIcon("CategoryId"))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable("Name"))">Name<span class="fa @(SetSortIcon("Name"))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable("LifeCycleId"))">LifeCycleId<span class="fa @(SetSortIcon("LifeCycleId"))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable("LifeCycleName"))">LifeCycleName<span class="fa @(SetSortIcon("LifeCycleName"))"></span></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (list != null && list.Count() > 0)
        {
            foreach (var v in list)
            {
                <DisplayViewCategoryList item="v"></DisplayViewCategoryList>
            }
            
        }
        else
        {
            <tr>
                <td colspan="5">Cannot find product</td>
            </tr>
        }

    </tbody>
</table>

<div class="pagination">
    <button class="btn btn-custom" @onclick=@(async ()=> await NavigateToPage("previous"))>Prev</button>
    @for (int i = startPage; i <= endPage; i++)
    {
        var currentPage = i;
        <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async () =>await refreshRecords(currentPage))>
            @currentPage
        </button>
    }
    <button class="btn btn-custom" @onclick=@(async ()=> await  NavigateToPage("next"  ))>Next</button>
</div>
 
<br/>
<button 
    type="button" 
    class="btn btn-primary"
        @onclick="AddCategory">Add Category
</button>
@code {
    public string searchString { get; set; } = string.Empty;
    private IEnumerable<VCategory> list;
    private bool isSortedAscending;
    private string activeSortColumn;

    #region Pagination
    int totalPages = 1;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage = 1;
    int endPage;
    string sortColumnName = "CategoryId";
    string sortDir = "DESC";
    #endregion

    protected override  void OnInitialized()
    {
        base.OnInitialized();
        list = ViewCategoryRepository.GetAll();
    }

    protected override async Task OnInitializedAsync()
    {
        pagerSize = 3;
        pageSize = 5;
        curPage = 1;
        if (string.IsNullOrEmpty(searchString))
        {
            list = await ViewCategoryRepository.GetAllAsyncOrder((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir);
            totalRecords = ViewCategoryRepository.Count();
        }
        else
        {
            list = await ViewCategoryRepository.GetAllAsyncOrder((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchString);
            totalRecords = ViewCategoryRepository.Count(searchString);
        }
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        endPage = totalPages;

        SetPagerSize("forward");
        this.StateHasChanged();
    }


    private   async void HandleSearch(string filter)
    {
        if (string.IsNullOrEmpty(filter))
        {
            totalRecords = ViewCategoryRepository.Count();
            list = await ViewCategoryRepository.GetAllAsyncOrder((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir);
            searchString = string.Empty;
        }
        else
        {
            totalRecords = ViewCategoryRepository.Count(filter);
            list = await ViewCategoryRepository.GetAllAsyncOrder((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, filter);
            searchString = filter;
        }
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        endPage = totalPages;
        this.StateHasChanged();
    }

  

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            list = list.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                list = list.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                list = list.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }


    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }


    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }


    public async Task refreshRecords(int currentPage )
    {
      if (string.IsNullOrEmpty(searchString))
      {
            list = await ViewCategoryRepository.GetAllAsyncOrder((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir);
      } else {
            list = await ViewCategoryRepository.GetAllAsyncOrder((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir,searchString);
      }
        curPage = currentPage;
        this.StateHasChanged();
    }


    public async Task NavigateToPage(string direction )
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);       
    }


    private void AddCategory()
    {
        NavigationManager.NavigateTo("/categoryCreate");
    }

}