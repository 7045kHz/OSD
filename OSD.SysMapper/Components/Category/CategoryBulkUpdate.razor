@inject ILifeCycleRepository LifeCycleRepository
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService




@if (!submitted && !confirm)
{

   <div class="form-group row">
            <div class="col-md-6 p-3">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Select Lifecycle</RadzenText>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@LifeCycles TextProperty="Name" ValueProperty="LifeCycleId"
                                   Change=@(args => OnChange(args)) />

                </RadzenCard>
            </div>
    </div>
    <div class="form-group row">
            <div class="col-md-4 p-3">
            <RadzenCard Class="w-100">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@updatedText</RadzenText>
                    <RadzenButton Shade="Shade.Darker" Click=OnConfirm Text="YES" ButtonStyle="ButtonStyle.Danger" />
                    <RadzenButton Shade="Shade.Darker" Click=GotoIndex Text="Cancel" ButtonStyle="ButtonStyle.Warning" />
 
                </RadzenCard>
            </div>
           

   </div>
 

}
else 
{

    <div class="col-lg-6 col-xl-4 p-3">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Success</RadzenText>
            <RadzenButton Text=@updatedText Class="w-100"
                      ButtonStyle="ButtonStyle.Success"
                      Click=@(args => ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 4000 })) />
        </RadzenCard>
    </div>
}
@code {
    [Parameter]
    public IList<VCategory> Data { get; set; }
    public List<LifeCycle> LifeCycles { get; set; } = new List<LifeCycle>();
    public LifeCycle checkLifeCycles { get; set; } = new LifeCycle();
    private Category exampleModel = new Category();
    private int bulkLifeCycleId { get; set; } = -1;
    private string bulkLifeCycleName { get; set; } = string.Empty;
    private int updateCount { get; set; } = 0;
    private string updatedText { get; set; } = "Select LifeCycle for Record Count";
    private bool submitted { get; set; } = false;
    private bool DialogIsOpen { get; set; } = false;
    private bool confirm { get; set; } = false;
    protected async override Task OnInitializedAsync()
    {
        LifeCycles = (await LifeCycleRepository.GetAllAsync()).ToList();

    }


    void OnChange(object value)
    {
        bulkLifeCycleId = (int)value;
        checkLifeCycles = LifeCycles.Where(o => o.LifeCycleId.Equals(bulkLifeCycleId)).Single();
        foreach (var item in Data)
        {
            Console.WriteLine($"OnChange - Would update {exampleModel.Name} {exampleModel.CategoryId} with {value} ");
            updateCount++;

        }
        updatedText = $"Do you want to update {updateCount} records to {checkLifeCycles.Name}?";
    }


    void OnConfirm()
    {
        updateCount = 0;
        foreach (var item in Data)
        {
            exampleModel.Name = item.Name;
            exampleModel.LifeCycleId = bulkLifeCycleId;
            exampleModel.CategoryId = item.CategoryId;
            updateCount++;
            CategoryRepository.Update(exampleModel);
            Console.WriteLine($"OnConfirm - Would update {exampleModel.Name} {exampleModel.CategoryId} with {bulkLifeCycleId} ");
            updatedText = $"Updated {updateCount} records to {checkLifeCycles.Name}";

        }
        Console.WriteLine($"OnConfirm post - updatedText = {updatedText}");
        confirm = true;
        submitted = true;
    }


    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        Console.Write($"{message.Severity} notification");
        NavigationManager.NavigateTo("/categoryIndex", true);
    }
    void GotoIndex()
    {
            NavigationManager.NavigateTo("/categoryIndex", true);
    }
 
}
 
