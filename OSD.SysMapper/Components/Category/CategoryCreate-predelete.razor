@inject ILifeCycleRepository LifeCycleRepository
@inject ICategoryRepository CategoryRepository
@inject  NavigationManager  NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@using System
@using OSD.SysMapper.Components.LOV
@using Microsoft.Extensions.Logging

<div class="form-group">

<EditForm Model="@exampleModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
   <ValidationSummary />
   <div class="form-group row">
            <div class="col-md-6 p-3">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Category Name</RadzenText>
                    <RadzenTextBox Placeholder="Enter a category name..." Change=@(args => OnChange(args, "EnterName")) Class="w-100" />
                </RadzenCard>
            </div>
   </div>
   <div class="form-group row">
            <div class="col-md-6 p-3">
                <LifecycleLOV OnClose="BulkLifeCycleId"></LifecycleLOV>
            </div>
           
   </div>      
   
        

   <div class="form-group row">
                <div class="col-lg-6 col-lg-4 p-3">
                <RadzenButton Text="Ok" ButtonStyle="ButtonStyle.Danger" Click="ShowAddDialog" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="GoIndex" ButtonStyle="ButtonStyle.Dark" Style="margin-bottom: 10px; width: 150px" />


                @if (!isVisable)
                {
                    <RadzenButton Click="@toggleViewCategory" Icon="add" Shade="Shade.Light" ButtonStyle="ButtonStyle.Info" Text="Display Existing Categories"></RadzenButton>
                }

                <!-- Two isVisable needed to keep buttons for hide and show in same postion -->
                @if (isVisable)
                {
                    <RadzenButton Click="@toggleViewCategory" Shade="Shade.Light" ButtonStyle="ButtonStyle.Info" Text="Hide Categories"></RadzenButton>
                }
                </div>
               @if (isVisable)
                {
                    <CategoryMinimalList></CategoryMinimalList>
                }
   </div>
    
 </EditForm>


 </div>

@code {
    [Parameter]
    public string SearchName { get; set; } = string.Empty;
    [Parameter]
    public int SearchId { get; set; } = -1;

    // public string rSelectedCategoryId = string.Empty;
    public List<LifeCycle> LifeCycles { get; set; } = new List<LifeCycle>();
    private bool IsSaved { get; set; } = false;
    private bool Submitted { get; set; } = false;
    private bool isVisable = false;
    private int bulkLifeCycleId { get; set; }
    private int NameExists { get; set; } = 2;
    private Category exampleModel = new Category();


    protected async override Task OnInitializedAsync()
    {
        LifeCycles = (await LifeCycleRepository.GetAllAsync()).ToList();
    }
    void BulkLifeCycleId(int newLifecycleId)
    {
        bulkLifeCycleId = newLifecycleId;
        Console.WriteLine($"Setting bulkLifeCycleId to {newLifecycleId} in  BulkLifeCycleId");
    }



    private async void HandleValidSubmit()
    {

        // exampleModel.LifeCycleId = Int32.Parse(rSelectedCategoryId);
        NameExists = CategoryRepository.NameExists(exampleModel.Name.ToString());


        if (NameExists < 1 )
        {
            await  CategoryRepository.AddAsync(exampleModel);
            Console.WriteLine("Does not exist - Will create: " + NameExists);
            Submitted = true;
            IsSaved = true;
            StateHasChanged();

        }
        else {
            Console.WriteLine("Name exists - not creating: " + NameExists);
            Submitted = true;
            IsSaved = false;
            StateHasChanged();
        }

        Console.WriteLine("Catagory ID: " + exampleModel.CategoryId);
        // Process the valid form
    }
    async Task ShowAddDialog()
    {
        var result = await DialogService.OpenAsync("Edit Dialog", ds =>
        @<div>
            <p Style="margin-bottom: 1rem">AddRecord?</p>
            <div class="row">
                <div class="col-md-12">
                    <LifecycleLOV OnClose="BulkLifeCycleId"></LifecycleLOV>

                </div>
                <div class="col-md-12">
                    <RadzenButton Text="Ok" ButtonStyle="ButtonStyle.Danger" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="GoIndex" ButtonStyle="ButtonStyle.Dark" Style="margin-bottom: 10px; width: 150px" />

                </div>
            </div>
        </div>
    );
        if (result)
        {
            try
            {

                var u = new Category();
                u.Name = exampleModel.Name;
                  u.LifeCycleId = bulkLifeCycleId;

                await CategoryRepository.AddAsync(u);
                Console.WriteLine($"Create Item {u.Name} with {u.LifeCycleId} in ShowAddDialog");
                NavigationManager.NavigateTo("/categoryIndex", true);


            }
            catch (Exception e)
            {
                throw e;
            }
        }
        Console.WriteLine($"ShowEditDialog Dialog result: {result}");
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        Console.Write($"{message.Severity} notification");
        NavigationManager.NavigateTo("/categoryCreate", true);
    }
 
    void OnChange(object value, string name)
    {
        switch (name){
            case "EnterName":
                exampleModel.Name = value.ToString();
                break;
            case "SelectLifeCycle":
                exampleModel.LifeCycleId = (int)value;
                break;
            default:
                Console.WriteLine($"Got unknown: {name} value changed to {value} ");
                break;
        } 
        Console.WriteLine($"Setting exampleModel.Name {exampleModel.Name.ToString()} and exampleModel.LifeCycleId set to {(int)exampleModel.LifeCycleId} ");
 
     }
    void GoIndex()
    {
        NavigationManager.NavigateTo("/categoryIndex", true);
    }
    private void toggleViewCategory()
    {
        this.isVisable = !this.isVisable;
    }
}
