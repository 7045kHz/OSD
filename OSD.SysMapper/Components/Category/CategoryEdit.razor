@inject ILifeCycleRepository LifeCycleRepository
@inject ICategoryRepository CategoryRepository
@inject  NavigationManager  NavigationManager
@inject NotificationService NotificationService
@using System

@using Microsoft.Extensions.Logging
<div Style="width: 100%; overflow: hidden; border: var(--rz-grid-cell-border)" Class="rz-shadow-1">
 @if (!Submitted)
{

<EditForm Model="@exampleModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
   <ValidationSummary />
            <div class="row  d-flex" >
                <div class="col-md-6 p-3" Style="margin-left: auto; margin-right: auto">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Category Name</RadzenText>
                        <RadzenTextBox ReadOnly="true" @bind-Value=@exampleModel.Name  Class="w-100" />
                </RadzenCard>
            </div>
      </div>
      <div  class="row  d-flex">
                <div class="col-md-6 p-3" Style="margin-left: auto; margin-right: auto">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Select Lifecycle</RadzenText>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@LifeCycles TextProperty="Name" Value=@exampleModel.LifeCycleId ValueProperty="LifeCycleId"
                                    Change=@(args => OnChange(args, "SelectLifeCycle")) />
 
                </RadzenCard>
            </div>
      </div>



      <div class="row  d-flex ">
                <div class="col-md-6 p-3" Style="margin-left: auto; margin-right: auto">
                    <RadzenButton Shade="Shade.Light" Click=HandleValidSubmit Text="Save" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Shade="Shade.Lighter" Click=GoIndex Text="Cancel" ButtonStyle="ButtonStyle.Dark" />
                    <RadzenButton Shade="Shade.Dark" Click=Delete Text="Delete" ButtonStyle="ButtonStyle.Danger" />
                @if (!isVisable)
                {
                    <RadzenButton Click="@toggleViewCategory" Icon="add" Shade="Shade.Light" ButtonStyle="ButtonStyle.Info" Text="Display Existing Categories"></RadzenButton>
                }

                <!-- Two isVisable needed to keep buttons for hide and show in same postion -->
                @if (isVisable)
                {
                    <RadzenButton Click="@toggleViewCategory" Shade="Shade.Light" ButtonStyle="ButtonStyle.Info" Text="Hide Categories"></RadzenButton>
                }
                </div>
               @if (isVisable)
                {
                    <CategoryMinimalList></CategoryMinimalList>
                }
   </div>
    
 </EditForm>


}
else if (IsSaved)
 {
        <div class="col-md-6 p-3" Style="margin-left: auto; margin-right: auto">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Success</RadzenText>
                <RadzenButton Text="Saved Updated Category" Class="w-100"
                          ButtonStyle="ButtonStyle.Success"
                          Click=@(args => ShowNotification(new NotificationMessage {   Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Success Category Updated", Duration = 4000 })) />
            </RadzenCard>
        </div>
 }

else if (IsDeleted)
 {
        <div class="col-md-6 p-3" Style="margin-left: auto; margin-right: auto">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Success</RadzenText>
            <RadzenButton Text="Deleted Record" Class="w-100"
                          ButtonStyle="ButtonStyle.Danger"
                          Click=@(args => ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Success", Detail = "Category Deleted", Duration = 4000 })) />
        </RadzenCard>
    </div>
 }
 
 </div>
@code {

    [Parameter]
    public int SearchId { get; set; } = -1;
    public string NewName { get; set; } = string.Empty;
    // public string rSelectedCategoryId = string.Empty;
    public List<LifeCycle> LifeCycles { get; set; } = new List<LifeCycle>();
    private bool IsSaved { get; set; } = false;
    private bool IsDeleted { get; set; } = false;
    private bool Submitted { get; set; } = false;
    private bool isVisable = false;

    private int NameExists { get; set; } = 2;
    private Category exampleModel = new Category();



    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine($"Got ID: {SearchId}");
        LifeCycles = (await LifeCycleRepository.GetAllAsync()).ToList();
        exampleModel = (await CategoryRepository.FindAsync(SearchId));
        Console.WriteLine($"Got exampleModel name: {exampleModel.Name}");
    }

    private async void HandleValidSubmit()
    {

        // exampleModel.LifeCycleId = Int32.Parse(rSelectedCategoryId);

        Console.WriteLine("Will Update: " + exampleModel.Name + " " + exampleModel.LifeCycleId);

             CategoryRepository.UpdateAsync(exampleModel);
 
            Submitted = true;
            IsSaved = true;
            StateHasChanged();
    }
    private async void Delete()
    {

        // exampleModel.LifeCycleId = Int32.Parse(rSelectedCategoryId);

        Console.WriteLine("Will Delete: " + exampleModel.Name + " " + exampleModel.LifeCycleId);

          CategoryRepository.RemoveAsync((int)exampleModel.CategoryId);
 
            Submitted = true;
            IsDeleted = true;
  
            StateHasChanged();
    }

    void GoIndex()
    {
        NavigationManager.NavigateTo("/categoryIndex", true);
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        Console.Write($"{message.Severity} notification");
        if (IsDeleted) {
            NavigationManager.NavigateTo("/categoryIndex", true);
        } 
        else {
            NavigationManager.NavigateTo($"/categoryEdit/{SearchId}", true);
        }
        
    }
 
    void OnChange(object value, string name)
    {
        switch (name){
            case "EnterName":
                exampleModel.Name = value.ToString();
                break;
            case "SelectLifeCycle":
                exampleModel.LifeCycleId = (int)value;
                break;
            default:
                Console.WriteLine($"Got unknown: {name} value changed to {value} ");
                break;
        } 
        Console.WriteLine($"Setting exampleModel.Name {exampleModel.Name.ToString()} and exampleModel.LifeCycleId set to {(int)exampleModel.LifeCycleId} ");
 
     }
    
    private void toggleViewCategory()
    {
        this.isVisable = !this.isVisable;
    }
}
